/*!
	fiug service-worker
	Version v0.4.4-2021-09-10T04:08:32.215Z
	https://github.com/crosshj/fiug
	(c) 20xx-20xx Harrison Cross.
*/
const utils=(()=>{let e;const t=(()=>{let e;return(t={})=>Object.entries(t).length?(e=e||Object.entries(t).map((([e,t])=>({contentType:e,extensions:[],...t}))),e):e||[]})(),r=r=>t(e).find((e=>e.extensions.includes(r.split(".").pop()))),s=e=>{const t=[],r=[],s=(e,n="/")=>{Object.keys(e).filter((t=>{const r=e[t];return!!r&&"object"==typeof r&&!Array.isArray(r)})).forEach((a=>{const i=Object.keys(e[a]);i&&i.length?(e[a],r.push((()=>s(e[a],`${n}${a}/`)))):t.push({name:a,code:n+a,path:n+a})}))};for(r.push((()=>s(e)));r.length>0;)r.shift()();return t};const n=async(e,t)=>await(await fetch(e,t)).json();return{addBase:function(e,t="../../",r="_blank"){try{const s=e.includes("<base")?"":`\n<base href="${t}" target="${r}">\n`;return e.includes("<html>")||(e="<html>\n"+e+"\n</html>"),e=(e=e.replace("<html>",e.includes("<head>")?"<html>":"<html>\n\n<head></head>\n")).replace("<head>",`<head>${s}`)}catch(t){return e}},fetchJSON:n,flattenTree:s,flattenObject:e=>{let t=[],r=[{obj:e,path:[]}];for(;r.length>0;){const e=r.pop();Object.keys(e.obj).forEach((s=>{const n=e.obj[s];if("object"!=typeof n)return;const a=e.path.concat(s);t.push(a),r.unshift({obj:n,path:a})}))}return t.map((e=>e.join("/")))},keepHelper:(e,t)=>{const r=s(e).map((e=>e.path.replace("/.keep",""))),n=t.map((e=>e.path)).filter((e=>!e.includes("/.keep"))).map((e=>"/"===e[0]?e:"./"===e.slice(0,2)?e.replace(/^\.\//,"/"):"/"+e)),a=r.reduce(((e,t,r,s)=>(0!==s.filter((e=>e!==t&&e.startsWith(t))).length||n.includes(t)||e.push(t),e)),[]);return r.map((e=>a.includes(e)?e+"/.keep":n.includes(e)?e:void 0)).filter((e=>!!e))},getCodeAsStorage:function(e,t,r){const n=s(e);for(let e=0;e<n.length;e++){const r=n[e];n[e]={key:r.path,value:t.find((e=>e.name===r.path.split("/").pop()))},n[e].value.path=n[e].value.path||r.path,n[e].value.code=n[e].value.code||r.code}const a=t.filter((e=>e.untracked)).map(((e,t)=>({key:`/${r}/${e.name}`,value:{code:e.code,name:e.name,path:`/${r}/`}})));return[...n,...a]},getMime:r,initMimeTypes:async()=>{e=await n("https://cdn.jsdelivr.net/npm/mime-db@1.45.0/db.json")},notImplementedHandler:async(e,t)=>(console.log("handler not implemented"),JSON.stringify({params:e,event:t,error:"not implemented"},null,2)),safe:e=>{try{return e()}catch(t){return void console.error("possible issue: "+e.toString())}},treeInsertFile:(e,t)=>{const r=e.split("/").filter((e=>!!e&&"."!==e)),s=JSON.parse(JSON.stringify(t));let n=s;return r.forEach((e=>{n[e]=n[e]||{},n=n[e]})),s},unique:(e,t)=>{const r=[],s=new Map;for(const n of e)s.has(t(n))||(s.set(t(n),!0),r.push(n));return r},fetchFileContents:async function(e,t){const s=await fetch(e,t),n=(r(e)||{}).contentType||s.headers.get("Content-Type");return!["image/","audio/","video/","wasm","application/zip"].find((e=>n.includes(e)))||["image/svg","image/x-portable-pixmap"].find((e=>n.includes(e)))||[".ts"].find((t=>e.includes(t)))?await s.text():await s.blob()}}})(),StorageManager=(()=>{const e=()=>[];async function t(e,t,r){const s=(0,this.utils.flattenTree)(e),n={},a=await t.keys();for(const e of a)e.startsWith(`./${r}/`)&&(n[e]={key:e,untracked:!0});for(let e=0;e<s.length;e++){let t=n["."+s[e].path];t&&(t.untracked=!1)}const i=Object.entries(n).map((([,e])=>e)).filter((e=>!0===e.untracked)).map((e=>({...e,name:e.key.split("/").pop(),path:e.key})));return[...s,...i]}class r{path;term;lines;currentLine;currentColumn;constructor(e){this.fileStore=e}async load(e){this.path=e;const t=await this.fileStore.getItem(e);"string"==typeof t?(this.lines=t.split("\n").map((e=>e.toLowerCase())),this.reset()):this.done=!0}reset(){this.currentLine=0,this.currentColumn=0,this.done=!1}next(e){if(this.done)return-1;if(!this.lines||!this.path)return-1;for(e.toLowerCase()!==this.term&&(this.term=e.toLowerCase(),this.reset());;){const e=this.currentColumn,t=(this.lines[this.currentLine]||"").indexOf(this.term,this.currentColumn);if(-1!==t)return this.currentColumn=t+1,{file:this.path,line:this.currentLine,column:this.currentColumn-1,text:this.lines[this.currentLine].slice(0===e?Math.max(0,t-30):e+this.term.length-1,Math.max(t+30+this.term.length)).trim()};if(this.currentColumn=0,this.currentLine++,this.currentLine>this.lines.length-1)return this.done=!0,-1}}}class s{MAX_RESULTS=1e4;encoder=new TextEncoder;timer;stream;async init({term:e,include:t="./",fileStore:s}){this.timer={t1:performance.now()};const n={};await s.iterate(((e,r)=>{(r.startsWith(t)||`./${r}`.startsWith(t))&&(n[r]=e)}));const a=new r({getItem:async e=>n[e]});let i=-1;const o=Object.keys(n),c=this.encoder;let l=0;this.stream=new ReadableStream({start(e){},async pull(t){for(;;)try{const r=a.next(e);if(l>=this.MAX_RESULTS||-1===r&&i===o.length-1)return void t.close();if(-1===r){await a.load(o[++i]);continue}l++,t.enqueue(c.encode(JSON.stringify(r)+"\n"))}catch(e){return console.log(e),void t.close()}}})}async search(e){const t=this.stream.getReader();let r=0;for(;;){const{done:s,value:n}=await t.read();if(s)break;if(e(n),r++,r===this.MAX_RESULTS)break}this.timer.t2=performance.now(),e({summary:{timer:this.timer.t2-this.timer.t1,count:r}})}}async function n({filename:e,filesStore:t,cache:r,storagePath:s,fetchFileContents:n}){const a=await t.getItem(e);let i;return a&&"reload"!==r?a:(i=await n(e),s?t.setItem("."+s.replace("/welcome/","/.welcome/"),i):t.setItem(e,i),i)}async function a({result:e,filesStore:t,cache:r,servicesStore:s,fetchFileContents:a}){const{safe:i,flattenTree:o}=this.utils;if(!i((()=>e.result[0].code.find))){const t=JSON.parse(e.result[0].code);return e.result[0].code=t.files,e.result[0].tree=t.tree,void console.log("will weird things ever stop happening?")}const c=e.result[0].code.find((e=>"service.json"===e.name));if(c&&!c.code){const s=`./.${e.result[0].name}/service.json`;c.code=await n({filename:s,filesStore:t,cache:r,fetchFileContents:a})}if(c){let s=JSON.parse(c.code);if(!s.tree){const e=`./${s.path}/service.json`;c.code=await n({filename:e,filesStore:t,cache:r,fetchFileContents:a}),s=JSON.parse(c.code)}e.result[0].code=s.files,e.result[0].tree={[e.result[0].name]:s.tree}}const l=i((()=>e.result[0].code.length)),d=o(i((()=>e.result[0].tree)));for(var h=0;h<l;h++){const s=e.result[0].code[h];if(!s.code&&s.path){const e="./"+s.path,i=(d.find((e=>e.name===s.name))||{}).path;s.code=await n({filename:e,filesStore:t,cache:r,storagePath:i,fetchFileContents:a})}}e.result[0].name?await s.setItem(e.result[0].id+"",{name:e.result[0].name,id:e.result[0].id,tree:e.result[0].tree}):console.error("cannot set services store item without name")}function i(e,t){const r={};return new Proxy(e,{apply:(e,s,n)=>{const a=e.name;r[a]=r[a]||{};const i=n.toString(),o=r[a][i];return o||(r[a][i]=e.apply(s,n),setTimeout((()=>{delete r[a][i]}),t),r[a][i])}})}let o,c,l;async function d(e){const t=this.stores.changes,r=this.stores.files,s=this.stores.services,{fetchFileContents:n}=this.utils;o=o||i(t.getItem.bind(t),250),c=c||i(r.getItem.bind(r),250),l=l||i((async()=>{const e=await s.keys();let t=[];for(let r=0,n=e.length;r<n;r++){const n=await s.getItem(e[r]);t.push(n)}return t}),500);let a=performance.now();const d=()=>{const e=performance.now()-a;return a=performance.now(),e.toFixed(3)},h=await o(e);if(console.log(`changes store: ${d()}ms (${e})`),h&&"update"===h.type)return h.value;let u=await c(e);if(console.log(`file store: ${d()}ms (${e})`),u&&u.includes&&u.includes("##PLACEHOLDER##")){const t=await l();let s;t.sort(((e,t)=>t.name.length-e.name.length));let a={};for(let r=0,n=t.length;r<n&&(a=t[r],!("github"===a.type&&a.git&&a.git.tree&&e.startsWith(a.name)&&(s=a.git.tree.find((t=>e===`${a.name}/${t.path}`)),s)));r++);if(!s)return u;const i=async({path:e})=>{try{const t="https://raw.githubusercontent.com/{owner}/{repo}/{sha}/{path}".replace("{path}",e).replace("{owner}",a.owner).replace("{repo}",a.repo).replace("{sha}",a.git.sha);return await n(t)}catch(e){return void console.error(e)}};u=await i(s),u&&r.setItem(e,u)}return u}const h=(e,t,r,s,n)=>async function(a,i){const o=i.request.headers.get("x-cache");if(0===Number(a.id))return await s.read();const c=[];if(!a.id||"*"===a.id){const r=[];await e.iterate(((e,t)=>{r.push(e)}));for(var l=0,d=r.length;l<d;l++){const e=r[l],s=await this.getCodeFromStorageUsingTree(e.tree,t,e.name);e.code=s}const s=[...c,...r].sort(((e,t)=>Number(e.id)-Number(t.id))).map((e=>({id:e.id,name:e.name})));return JSON.stringify({result:this.utils.unique(s,(e=>Number(e.id)))},null,2)}const h=async e=>{const t=(await n.keys()).filter((t=>t.startsWith(`${e.name}`))).map((t=>t.split(e.name+"/")[1])),r=await n.getItem(`state-${e.name}-opened`)||[],s=(r.find((e=>0===e.order))||{}).name||"";e.state={opened:r,selected:s,changed:t},e.treeState={expand:await n.getItem(`tree-${e.name}-expanded`)||[],select:s,changed:t,new:[]}};await t.setItem("lastService",a.id);const u=await e.getItem(a.id);if(u)return u.code=await this.getCodeFromStorageUsingTree(u.tree,t,u.name),await h(u),JSON.stringify({result:[u]},null,2);const p=[]||[],m={result:"*"!==a.id&&a.id?p.filter((e=>Number(e.id)===Number(a.id))):p};return await this.fileSystemTricks({result:m,filesStore:t,servicesStore:e,cache:o,fetchFileContents:r}),m.forEach(h),JSON.stringify(m,null,2)};return class{stores=(()=>{var e=[localforage.INDEXEDDB,localforage.WEBSQL,localforage.LOCALSTORAGE];return{files:localforage.createInstance({driver:e,name:"service-worker",version:1,storeName:"files",description:"permanent state of contents of files across projects"}),services:localforage.createInstance({driver:e,name:"service-worker",version:1,storeName:"services",description:"services directory stucture, type, etc"}),providers:localforage.createInstance({driver:e,name:"service-worker",version:1,storeName:"providers",description:"connects services to outside world"}),changes:localforage.createInstance({driver:e,name:"service-worker",version:1,storeName:"changes",description:"keep track of changes not pushed to provider"}),handlers:localforage.createInstance({driver:e,name:"service-worker",version:1,storeName:"handlers",description:"used after app has booted when service worker is updated"})}})();defaultServices=e;getCodeFromStorageUsingTree=t.bind(this);fileSystemTricks=a.bind(this);getFile=d.bind(this);constructor({utils:e,ui:t}){var r;this.utils=e,this.handlers={serviceSearch:(r=this.stores.files,async(e,t)=>{const n=new s;return await n.init({...e,fileStore:r}),n.stream}),serviceRead:h(this.stores.services,this.stores.files,e.fetchFileContents,t,this.stores.changes).bind(this)}}}})(),Router=(()=>{const e={"/service/create/:id?":(()=>{const e=new RegExp(/^((?:.*))\/service\/create(?:\/((?:[^\/]+?)))?(?:\/(?=$))?$/i);return{match:t=>e.test(t),params:t=>({id:e.exec(t)[2]})}})(),"/service/read/:id?":(()=>{const e=new RegExp(/^((?:.*))\/service\/read(?:\/((?:[^\/]+?)))?(?:\/(?=$))?$/i);return{match:t=>e.test(t),params:t=>({id:e.exec(t)[2]})}})(),"/service/update/:id?":(()=>{const e=new RegExp(/^((?:.*))\/service\/update(?:\/((?:[^\/]+?)))?(?:\/(?=$))?$/i);return{match:t=>e.test(t),params:t=>({id:e.exec(t)[2]})}})(),"/service/change":(()=>{const e=new RegExp(/^((?:.*))\/service\/change(?:\/((?:[^\/]+?)))?(?:\/(?=$))?$/i);return{match:t=>e.test(t),params:t=>({id:e.exec(t)[2]})}})(),"/service/commit":(()=>{const e=new RegExp(/^((?:.*))\/service\/commit(?:\/((?:[^\/]+?)))?(?:\/(?=$))?$/i);return{match:t=>e.test(t),params:t=>({id:e.exec(t)[2]})}})(),"/service/delete/:id?":(()=>{const e=new RegExp(/^((?:.*))\/service\/delete(?:\/((?:[^\/]+?)))?(?:\/(?=$))?$/i);return{match:t=>e.test(t),params:t=>({id:e.exec(t)[2]})}})(),"/service/provider/test/:id?":(()=>{const e=new RegExp(/^((?:.*))\/service\/provider\/test(?:\/((?:[^\/]+?)))?(?:\/(?=$))?$/i);return{match:t=>e.test(t),params:t=>({id:e.exec(t)[2]})}})(),"/service/provider/create":(()=>{const e=new RegExp(/^((?:.*))\/service\/provider\/create(?:\/((?:[^\/]+?)))?(?:\/(?=$))?$/i);return{match:t=>e.test(t),params:t=>({id:e.exec(t)[2]})}})(),"/service/provider/read/:id?":(()=>{const e=new RegExp(/^((?:.*))\/service\/provider\/read(?:\/((?:[^\/]+?)))?(?:\/(?=$))?$/i);return{match:t=>e.test(t),params:t=>({id:e.exec(t)[2]})}})(),"/service/provider/update/:id?":(()=>{const e=new RegExp(/^((?:.*))\/service\/provider\/update(?:\/((?:[^\/]+?)))?(?:\/(?=$))?$/i);return{match:t=>e.test(t),params:t=>({id:e.exec(t)[2]})}})(),"/service/provider/delete/:id?":(()=>{const e=new RegExp(/^((?:.*))\/service\/provider\/delete(?:\/((?:[^\/]+?)))?(?:\/(?=$))?$/i);return{match:t=>e.test(t),params:t=>({id:e.exec(t)[2]})}})(),"/manage/:id?":(()=>{const e=new RegExp(/^((?:.*))\/manage(?:\/((?:[^\/]+?)))?(?:\/(?=$))?$/i);return{match:t=>e.test(t),params:t=>({id:e.exec(t)[2]})}})(),"/monitor/:id?":(()=>{const e=new RegExp(/^((?:.*))\/monitor(?:\/((?:[^\/]+?)))?(?:\/(?=$))?$/i);return{match:t=>e.test(t),params:t=>({id:e.exec(t)[2]})}})(),"/persist/:id?":(()=>{const e=new RegExp(/^((?:.*))\/persist(?:\/((?:[^\/]+?)))?(?:\/(?=$))?$/i);return{match:t=>e.test(t),params:t=>({id:e.exec(t)[2]})}})(),"/.welcome/:path?":(()=>{const e=new RegExp(/^((?:.*))\/\.welcome\/((?:.*))(?:\/(?=$))?$/i);return{match:t=>e.test(t),params:t=>({path:(e.exec(t)[2]||"").split("?")[0],query:(e.exec(t)[2]||"").split("?")[1]})}})(),"/service/search/":(()=>{const e=new RegExp(/^((?:.*))\/service\/search\/.*$/i);return{match:t=>{return e.test("/"===(r=t)[r.length-1]?r:r+"/");var r},params:(e,t)=>Object.fromEntries(t.split("?").pop().split("&").map((e=>e.split("="))))}})()},t=({_handlers:t})=>r=>(s,n)=>{const a=e[s];let i;a||(i=(e=>{const t=e.replace("/:path?","").replace("/",""),r=new RegExp(`^((?:.*))/${t}/((?:.*))(?:/(?=$))?$`,"i");return{match:e=>r.test(e),params:e=>({path:(r.exec(e)[2]||"").split("?")[0],query:(r.exec(e)[2]||"").split("?")[1]})}})(s));const o=t.find((e=>e.pathString===s&&e.method===r));o?o.handler=n:t.push({...a||i,pathString:s,method:r,handler:n})};return class{_handlers=[];constructor({storage:e,templates:r,swHandlers:s}){this.swHandlers=s,this.storage=e,this.templates=r,this.generic=t(this),this.get=this.generic("get"),this.post=this.generic("post"),this.expressHandler=(({templates:e,storage:t})=>{const{getFile:r}=t;return async(t,s)=>(await e.refresh(),async(s,n)=>{const{path:a,query:i}=s,o=decodeURI(a.replace("/::preview::/","")),c=a.includes("/::preview::/");a.includes(".templates/");const l=c?o.split("/").pop():a.split("/").pop();let d;const h=await r(`${t}/${o}`)||await r(`./${t}/${o}`);let u;try{u="string"!=typeof h?h?JSON.stringify(h,null,2):"":h}catch(e){}return c&&(d=e.convert(l,u)),c&&!d?e.NO_PREVIEW:h&&h.type&&h.size?d||h:d||u||h})})(this),this.addServiceHandler=(({storage:e,expressHandler:t,generic:r,swHandlers:s})=>async function({name:n,msg:a}){const i=e.stores.handlers,o=`^/${n}/(.*)`,c="./modules/service-worker.handler.js",l=s.find((e=>e.handlerName===c)),d=l?l.type:"fetch",h=l?l.handler:"route-handler",u=l?l.handlerText:"service-worker-handler";l&&s.find((e=>e.handlerName===c&&e.routePattern===o))||(s.push({type:d,routePattern:o,route:new RegExp(o),handler:h,handlerName:c,handlerText:u}),await i.setItem(o,{type:d,route:o,handlerName:c,handlerText:u}));const p=await t(n,a);r("get")(`/${n}/:path?`,p)})(this),this.restorePrevious=(({storage:e,addServiceHandler:t})=>async()=>{const r=e.stores.services,s=[];await r.iterate(((e,t)=>{let{name:r}=e;s.push({name:r})}));for(let e=0,r=s.length;e<r;e++){const{name:r}=s[e];await t({name:r,msg:"served from reconstituted"})}})(this),this.find=(({_handlers:e,restorePrevious:t})=>async r=>{const{url:s,method:n}=r,a=(()=>{try{return Object.fromEntries([...new URL(s).searchParams])}catch(e){return{}}})();let i=e.find((e=>n.toLowerCase()===e.method&&e.match(s.split("?")[0])));if(i||(await t(),i=e.find((e=>n.toLowerCase()===e.method&&e.match(s.split("?")[0]))),i))return{exec:async e=>await i.handler(i.params(s.split("?")[0],s),e,a)}})(this),this.restorePrevious()}}})(),{UIManager:UIManager,UIManagerAddChanged:UIManagerAddChanged}=(()=>{const e=e=>JSON.stringify(e,null,2);return{UIManager:class{id=0;name;changeStore=void 0;cache=void 0;changed=void 0;constructor(e){this.name=e}init=(e,t)=>(async(e,{handlerStore:t,changeStore:r})=>{e.changeStore=r,e.changed=await r.getItem("UIManagerChanged")||{};const s=`^/${e.name}/(.*)`,n="./modules/service-worker.handler.js";let a,i=0;for(;!a&&i<5;)a=handlers.find((e=>e.handlerName===n)),a||(i++,await new Promise((e=>setTimeout(e,3e3))));if(!a)return console.error("could not find a handler to base UIManager handler on!");a&&handlers.find((e=>e.handlerName===n&&e.routePattern===s))||(handlers.push({type:a.type,routePattern:s,route:new RegExp(s),handler:a.handler,handlerName:n,handlerText:a.handlerText}),await t.setItem(s,{type:a?a.type:"fetch",route:s,handlerName:n,handlerText:a?a.handlerText:"service-worker-handler(set in ui manager)"}))})(this,{handlerStore:e,changeStore:t});read=()=>(async t=>{let r;return t.cache||await async function(){let e={};const r=[],s=await caches.open(cacheName),n=await s.keys();for(var a=0,i=n.length;a<i;a++){const t=n[a],i=t.url.split(/(\/fiug\/|\/shared\/|\/_\/modules\/)/);i.shift();const l=i.join("").split("/").filter((e=>!!e));let d=e;for(var o=0,c=l.length;o<c;o++){const e=l[o];e&&(d[e]=d[e]||{},d=d[e])}let h=(l[l.length-1]||"").replace("/","");const u=await(await s.match(t)).text();r.push({name:h,code:u,url:t.url})}e.modules=e._.modules,delete e._;const l={id:t.id,name:t.name,tree:{[t.name]:e},code:r};t.cache=l}(),Object.keys(t.changed).length&&(r=function(e,t){const r=JSON.parse(JSON.stringify(t.code));return Object.entries(e).forEach((([e,t])=>{const s=e.split("/").pop(),n=r.find((e=>e.name===s));n&&(n.code=t)})),{...t,code:r}}(t.changed,t.cache)),e({result:[r||t.cache]})})(this);update=t=>(async(t,{service:r})=>{const s=await caches.open(cacheName),n=Object.entries(t.changed);for(var a=0,i=n.length;a<i;a++){const[e,r]=n[a],i=e.split("/").pop(),o=t.cache.code.find((e=>e.name===i)),{url:c}=o,{contentType:l}=getMime(c)||{},d=new Response(r,{headers:{"content-type":l||""}});await s.put(c,d),o.code=r}return console.warn("TODO: save files to backend (if provider is available?)"),t.changed={},await t.changeStore.setItem("UIManagerChanged",t.changed),e({result:[r]})})(this,t);change=t=>(async(t,{path:r,code:s})=>(t.changed[r]=s,console.warn(`changed a file at: ${r}`),await t.changeStore.setItem("UIManagerChanged",t.changed),e({result:{path:r,code:s}})))(this,t)},UIManagerAddChanged:e=>{}}})(),ProviderManager=(()=>{const e=e=>JSON.stringify(e,null,2);async function t(e,t){const r=[".ts"].map((e=>new RegExp(`${e}$`.replace(/\./,".")))),s=await fetch(e,t),n=s.headers.get("Content-Type");return!["image/","audio/","video/","wasm","application/zip","application/octet-stream"].find((e=>n.includes(e)))||["image/svg","image/x-portable-pixmap"].find((e=>n.includes(e)))||r.find((t=>t.test(e)))?await s.text():await s.blob()}const r=({github:t})=>async(r,s)=>{const n=t&&await t.handler("test",{params:r,event:s});if(n)return n;const a=await s.request.json(),{providerType:i,providerUrl:o,providerAccessToken:c}=a;["basic-bartok-provider","github-provider"].includes(i)||e({error:`Unsupported provider type: ${i}`}),"github-provider"===i&&e({success:!0,todo:"test user's access token"});const l=(o+"/file/").replace("//file/","/file/"),d=(o+"/tree/").replace("//tree/","/tree/");try{if(200!==(await fetch(o)).status)return e({error:`Failed to connect to provider at: ${o}`})}catch(t){return e({error:`Failed to connect to provider at: ${o}`})}try{if(200!==(await fetch(l)).status)return e({error:`Failed to connect to provider at: ${l}`})}catch(t){return e({error:`Failed to connect to provider at: ${l}`})}try{if(200!==(await fetch(d)).status)return e({error:`Failed to connect to provider at: ${d}`})}catch(t){return e({error:`Failed to connect to provider at: ${d}`})}return e({success:!0})},s=({create:t,github:r})=>async(s,n)=>{const a=r&&await r.handler("create",{params:s,event:n});if(a)return a;try{const r=await n.request.json(),{providerType:s,providerUrl:a}=r;["basic-bartok-provider"].includes(s)||e({error:`Unsupported provider type: ${s}`});const i=await t({id:a,url:a});return e({success:!0,provider:i})}catch(t){return e({error:t})}},n=({github:t})=>async(r,s)=>{const n=t&&await t.handler("createCommit",{params:r,event:s});return n||e({error:"commits are only implemented for github repos"})};async function a(t){const r=this.stores.services,s=this.stores.files,n=this.github&&await this.github.handler("servicesCreate",{event:t});if(n)return n;try{const n=await t.request.json();let{providerType:a,providerUrl:i,providerAccessToken:o,repoName:c}=n;if(!["basic-bartok-provider"].includes(a))return e({error:`Unsupported provider type: ${a}`});if(!await this.read(i))return e({error:`Provider does not exist: ${i}`});const l=(i+"/tree/").replace("//tree/","/tree/"),d=(i+"/file/").replace("//file/","/file/"),h=[];await r.iterate(((e,t)=>{h.push(e)}));const u=await fetch(l);if(200!==u.status)return e({error:`Failed to connect to provider at: ${i}`});const{files:p,root:m,tree:f}=await u.json(),g=m.split("/").pop(),v=h.find((e=>e.name===g)),w=v?v.id:h.reduce(((e,t)=>Number(t.id)>=e?Number(t.id)+1:e),1),y={name:g,id:w,providerRoot:m,providerUrl:i,tree:f};if(!y.name)return void console.error("cannot set services store item without service name");await r.setItem(w+"",y),y.code=[];for(let e=0;e<p.length;e++){const t=p[e],r=await this.utils.fetchFileContents(`${d}${m}/${t}`);s.setItem(`./${g}/${t}`,r),y.code.push({name:t.split("/").pop(),path:`./${g}/${t}`,code:"string"==typeof r?r:""})}return await this.providerUpdateServiceJson({service:y,servicesStore:r,filesStore:s}),await this.app.addServiceHandler({name:g,msg:"served from fresh baked"}),e({result:{services:[y]}})}catch(t){return console.error(t),e({error:t})}}const i=async function({service:t,servicesStore:r,filesStore:s}){const n=this.github&&await this.github.handler("servicesUpdate",{service:t});if(n)return n;const a=t.code.find((e=>e.path.includes("/service.json")));if(!a)return;const i=JSON.parse(a.code),{code:o,...c}=t,{providerUrl:l,providerRoot:d}=t;i.tree=t.tree[t.name],i.files=t.code.map((e=>({name:e.name,path:e.path.replace("./","")}))).sort(((e,t)=>e.name.toLowerCase()>t.name.toLowerCase()?1:e.name.toLowerCase()<t.name.toLowerCase()?-1:0));const h=`${l}file/${d}${a.path.replace("./"+t.name,"")}`;a.code=e(i),c.name?(await r.setItem(t.id+"",c),await s.setItem(a.path,a.code),await fetch(h,{method:"post",body:a.code})):console.error("cannot set services store item without service name")};async function o(e){let{path:t,code:r,parent:s,deleteFile:n}=e;const a=this.github&&await this.github.handler("filesUpdate",e);if(a)return a;if(s=s||await this.stores.services.iterate(((e,t)=>{if(e.name===s||e.name===s.name)return e})),!s||!s.providerUrl)throw new Error("file not saved to provider: service not associated with a provider");const{providerUrl:i,providerRoot:o}=s,c=`${i}file/${o}${t.replace("./"+s.name,"")}`,l=await this.utils.fetchJSON(c,{method:n?"DELETE":"POST",body:n?void 0:r});if(l.error)throw new Error(l.error);return l}return class{constructor({app:c,storage:l,utils:d,GithubProvider:h}){return new Promise((async u=>{try{this.app=c,this.storage=l,this.utils=d,this.fetchContents=t.bind(this),this.store=l.stores.providers,this.stores=l.stores,this.github=await new h(this),this.handlers={testHandler:r(this),createHandler:s(this),readHandler:async(t,r)=>(console.error("not implemented: provider read.  Should return one or all saved provider details."),e({error:"not implemented"})),updateHandler:async(t,r)=>(console.error("not implemented: provider update.  Should update provider details."),e({error:"not implemented"})),deleteHandler:async(t,r)=>(console.error("not implemented: provider delete.  Should delete saved provider."),e({error:"not implemented"})),createCommit:n(this)},this.createServiceHandler=a.bind(this),this.providerUpdateServiceJson=i.bind(this),this.fileChange=o.bind(this),u(this)}catch(e){reject(e)}}))}create=async e=>await this.store.setItem(e.id+"",e);read=async e=>e?await this.store.getItem(e):await this.store.keys();update=async(e,t)=>{const r=await this.read(e);return t.id&&t.id!==e&&await this.delete(e),await this.store.setItem((t.id||r.id)+"",{...r,...t})};delete=async e=>await this.store.removeItem(e)}})(),GithubProvider=(()=>{const e={rateLimit:"/rate_limit",repoInfo:"/repos/{owner}/{repo}",latestCommit:"/repos/{owner}/{repo}/branches/{branch}",tree:"/repos/{owner}/{repo}/git/trees",getTreeRecursive:"/repos/{owner}/{repo}/git/trees/{tree_sha}?recursive=true",rawBlob:"https://raw.githubusercontent.com/{owner}/{repo}/{branch}/{path}",contents:"/repos/{owner}/{repo}/contents/{path}?ref={sha}",branch:"/repos/{owner}/{repo}/branches/{branch}",treeRecurse:"/repos/{owner}/{repo}/git/trees/{sha}?recursive=true",commit:"/repos/{owner}/{repo}/git/commits/{sha}",createCommit:"/repos/{owner}/{repo}/git/commits",blobCreate:"/repos/{owner}/{repo}/git/blobs",refs:"/repos/{owner}/{repo}/git/refs/heads/{branch}"};Object.entries(e).forEach((([t,r])=>{"/"===r[0]&&(e[t]="https://api.github.com"+e[t])}));const t=e=>JSON.stringify(e,null,2),r=(e,t)=>fetch(e,t).then((e=>e.json())),s=()=>void console.warn("Someone wants to be debugging...")||t({message:"not implemented"}),n=e=>async(e,t)=>s(),a=r=>async(s,n)=>{try{const{storage:{stores:n},fetchContents:a,app:i}=r,{auth:o,repo:c}=s,l=(n.providers,n.services),d=n.files,h={headers:{}};o&&(h.headers.authorization=`token ${o}`),h.headers.Accept="application/vnd.github.v3+json";const u=async()=>{const t=e.repoInfo.replace("{owner}/{repo}",c),{default_branch:s}=await r.fetchJSON(t,h);return s},p=s.branch||await u(),m=e.latestCommit.replace("{owner}/{repo}",c).replace("{branch}",p),{commit:{sha:f}}=await r.fetchJSON(m,h),g=e.getTreeRecursive.replace("{owner}/{repo}",c).replace("{tree_sha}",f),{tree:v,truncated:w}=await r.fetchJSON(g,h);w&&console.warn("github repo tree truncated - try without recursive flag");const y=v.filter((e=>"blob"===e.type)),b=async(t,r)=>{const s=await a((n=t,e.rawBlob.replace("{owner}/{repo}",c).replace("{branch}",r||p).replace("{path}",n.path)));var n;return{...t,contents:s}};for(let e=0,t=y.length;e<t;e++){const t=y[e],r="##PLACEHOLDER##";if(!t.path.includes(".templates")){await d.setItem(`${c}/${y[e].path}`,r);continue}const{contents:s}=await b(t,f);await d.setItem(`${c}/${y[e].path}`,s)}let $={};const x=[];await l.iterate(((e,t)=>{x.push(t),e.name===c&&($={key:t,...e})}));const S=x.length?Math.max(...x)+1:3e3,k=e=>{const t={[c]:{}},r=t[c];return e.forEach((e=>{e.path.split("/").reduce(((e,t)=>(e[t]=e[t]||{},e[t])),r)})),t},T=async(e,t)=>{const r=$.id||S,s={id:r,type:"github",name:c,tree:k(e),owner:c.split("/").slice(0,1).join(""),repo:c.split("/").pop(),git:{tree:e,sha:t},branch:p};return await l.setItem(r+"",s),{id:r,thisService:s}},{id:I,thisService:N}=await T(v,f);return await i.addServiceHandler({name:c,msg:"service added from github provider"}),t({result:{services:[N]}})}catch(e){return console.error(e),t({error:e})}},i=e=>async(e,t)=>s(),o=e=>async(e,t)=>s(),c=e=>async(e,t)=>s();async function l({files:t,git:r,auth:s,message:n,fetchJSON:a}){if(!t||!Array.isArray(t))return{error:"no files were changed"};if(!(t=t.filter((e=>!e.ignore))).length)return{error:"no files were changed"};if(!s)return{error:"auth is required"};if(!n)return{error:"message is required"};if(!r.owner)return{error:"repository owner is required"};if(!r.branch)return{error:"repository branch name is required"};if(!r.repo)return{error:"repository name is required"};let i=[];const o={headers:{authorization:`token ${s}`,Accept:"application/vnd.github.v3+json"}},c=async(e,t={},s={})=>{const n=(i=e,c={...r,...t},Object.keys(c).reduce(((e,t)=>e.replace(`{${t}}`,c[t])),i));var i,c;return await a(n,{...o,...s})},l=async(e,t,r)=>await c(e,t,{method:"POST",body:JSON.stringify(r)}),d=({path:e},t)=>({path:e,mode:"100644",type:"blob",sha:i[t].sha}),h=({path:e,mode:t,type:r,sha:s})=>({path:e,mode:t,type:r,sha:s}),u=t.filter((e=>!e.deleteFile)),p=t.filter((e=>e.deleteFile)).map((e=>e.path)),m=u.map((e=>e.path));i=await Promise.all(u.map((({content:t})=>l(e.blobCreate,null,(e=>{try{return{content:btoa(e),encoding:"base64"}}catch(t){return{content:e,encoding:"utf-8"}}})(t)))));const f=await c(e.branch),g=await c(e.treeRecurse,{sha:f?.commit?.sha}),v=await l(e.tree,null,{tree:(w=u,y=g,b=m,$=p,[...w.map(d),...y.tree.filter((e=>"tree"!==e.type&&!b.includes(e.path)&&!$.includes(e.path))).map(h)])});var w,y,b,$;const x=await l(e.createCommit,null,{message:n,tree:v.sha,parents:[f.commit.sha]});return((await l(e.refs,null,{sha:x.sha}))?.object?.url||"no commit url available").replace("https://api.github.com/repos","https://github.com").replace("git/commits","commit")}return class{constructor({storage:d,fetchContents:h,app:u,utils:p}){return new Promise(((m,f)=>{try{this.handler=(g=this,async(e,t)=>{try{const{params:r,event:s,service:n,parent:a}=t,i=s&&s?.request?.clone(),o=i&&await(i?.json()),{providerType:c}=o||{};if("createCommit"===e)return await g.createCommit(o,r);if(!(c?"github-provider"===c:"github"===(n||a)?.type))return;const l=g[e];if(!l)return;return["filesUpdate"].includes(e)?await l(t):await l(o,r)}catch(e){}}),this.storage=d,this.fetchContents=h,this.fetchJSON=r,this.app=u,this.utils=p,this.test=(r=>async(s,n)=>{try{const{storage:n}=r,{auth:a,repo:i,branch:o}=s,c={headers:{}};a&&(c.headers.authorization=`token ${a}`),c.headers.Accept="application/vnd.github.v3+json";const l=await r.fetchJSON(e.rateLimit,c);let{limit:d,remaining:h,reset:u}=l?.resources?.core;return u=new Date(1e3*u).toLocaleString("sv").split(" ").reverse().join(" "),console.log(t({limit:d,remaining:h,reset:u})),t({success:!0,limit:d,remaining:h,reset:u})}catch(e){return t({error:e})}})(this),this.create=(e=>async(r,n)=>{try{const{storage:t}=e,{auth:a,repo:i,branch:o}=r;return t.stores.providers,console.log({payload:r,params:n}),s()}catch(e){return console.error(e),t({error:e})}})(this),this.read=async(e,t)=>s(),this.update=n(),this.delete=n(),this.servicesCreate=a(this),this.servicesRead=i(),this.servicesUpdate=o(),this.servicesDelete=c(),this.filesCreate=a(this),this.filesRead=i(),this.filesUpdate=o(),this.filesDelete=c(),this.createCommit=(e=>async(r,s)=>{try{const{message:s,auth:n,cwd:a}=r;if(!s)return t({error:"commit message is required"});if(!n)return t({error:"auth token is required for commit"});if(!a)return t({error:"current working directory (cwd) is required for commit"});const{storage:{stores:i},utils:o}=e,c=i.services,d=i.changes,h=i.files,{flattenObject:u}=o;let p;if(await c.iterate(((e,t)=>{const{tree:r,name:s}=e;return a===`${s}/`||u(r).includes(a)?(p=e,!0):void 0})),!(p&&p.name&&p.branch&&p.repo&&"github"===p?.type))throw new Error("missing or malformed service");const m=new RegExp("^"+p.name+"/","g"),{owner:f,repo:g,branch:v}=p,w={owner:f,repo:g,branch:v},y=[],b=[],$=await d.keys();for(let e=0,t=$.length;e<t;e++){const t=$[e];if(!m.test(t))continue;const r=await d.getItem(t);if(!r?.service)continue;const{type:s,value:n,service:{name:a},deleteFile:i}=r;if(!a)continue;if(a!==p.name)continue;const o={path:t.replace(m,""),content:n,operation:s,deleteFile:i};o.path.startsWith(".git/")&&(o.ignore=!0),y.push(o),b.push({...r,key:t})}let x;if(y.filter((e=>!e.ignore)).length){if(x=await l({auth:n,files:y,git:w,message:s,fetchJSON:e.fetchJSON}),!x)throw new Error("commit failed");if(x.error)throw new Error(x.error)}else x={error:"no files changed"};for(let e=0,t=y.length;e<t;e++){const t=b[e];t.deleteFile?await h.removeItem(t.key):await h.setItem(t.key,t.value),await d.removeItem(t.key)}return t({commitResponse:x})}catch(e){return t({commitResponse:{error:e.message}})}})(this),m(this)}catch(e){f(e)}var g}))}}})(),ServicesManager=(()=>{const e=e=>JSON.stringify(e,null,2),t=t=>{if(t)try{return JSON.parse(e(t))}catch(e){return}},r=e=>[...new Set(e)];function s(e,t){var r=e;try{return t.split("/").every((function(e){return"."===e||(void 0===r[e]?(r=void 0,!1):(r=r[e],!0))})),r}catch(e){return}}const n=(...e)=>t=>e.reduce(((e,t)=>t(e)),t),a=e=>e.replace(/^\.\//,""),i=({app:t,storage:r,providers:s})=>async(n,a)=>{const i=r.stores.services,o=r.stores.files,{id:c}=n;if("provider"===c)return await s.createServiceHandler(a);const{name:l}=await a.request.json()||{};if(!c)return e({params:n,event:a,error:"id required for service create!"});if(!l)return e({params:n,event:a,error:"name required for service create!"});console.log("/service/create/:id? triggered"),await i.setItem(c+"",{name:l,id:c,tree:{[l]:{".templates":{"json.html":{}},"package.json":{}}}}),o.setItem(`./${l}/package.json`,{main:"package.json",comment:"this is an example package.json"}),o.setItem(`./${l}/.templates/json.html`,"\n\t\t\t\t<html>\n\t\t\t\t\t\t<p>basic json template output</p>\n\t\t\t\t\t\t<pre>{{template_value}}</pre>\n\t\t\t\t</html>\n\t\t\t\t"),await t.addServiceHandler({name:l,msg:"served from fresh baked"});const d=r.defaultServices();return e({result:{services:[d.filter((e=>777===Number(e.id)))]}})},o=({storage:t,ui:r,utils:s,templates:n})=>async(a,i)=>{const o=t.stores.services;t.stores.files;const c=t.stores.changes;let l,d;try{const e=i.request.clone();l=await e.json()}catch(e){}try{if(!l){const e=await i.request.formData();l=JSON.parse(e.get("json")),d=e.get("file")}}catch(e){}try{let{path:t,code:a,command:i,service:h}=l;if(d&&(a=d||""),h&&h===r.name)return r.change({path:t,code:a,command:i,service:u});const u=await o.iterate(((e,t)=>{if(e.name===h)return e}));"github"===u.type&&"./"==`${t.slice(0,2)}`&&(t=t.slice(2)),await c.setItem(t,{type:"update",value:a,service:(()=>{const{tree:e,...t}=u;return t})()}),u&&"upsert"===i&&(u.tree=s.treeInsertFile(t,u.tree),await o.setItem(u.id+"",u)),t.includes("/.templates/")&&await n.refresh();const p=()=>"";return e({result:{path:t,code:d?p(d):a}})}catch(t){return e({error:t})}},c=({storage:t,ui:r,utils:s,templates:n})=>async(r,n,a)=>{const{flattenObject:i}=s,o=t.stores.services,c=t.stores.files,l=t.stores.changes,{cwd:d}=a;let h;d&&await o.iterate(((e,t)=>{const{tree:r}=e;if(i(r).includes(d))return h=e.name,!0}));const u=[],p=await l.keys();for(let e=0,t=p.length;e<t;e++){const t=p[e],r=await l.getItem(t),s=r?.service?.name;s&&(h&&s!==h||u.push({fileName:t,...r,original:await c.getItem(t)}))}try{return e({changes:u,cwd:d})}catch(t){return e({error:t})}},l=(()=>{const e=e=>{const r=(e={})=>(Object.entries(e).forEach((([t,r])=>{if("./"!==t.slice(2)){if("/"===t[0])return delete e[t],void(e["."+t]=r);delete e[t],e["./"+t]=r}})),e);return{...e,service:e.service.name,tree:t(e.service.tree)||{},code:r(e.code),changes:r(e.changes),filesToAdd:[],filesToDelete:[]}},a=e=>{if(!(e.name.includes("move")||e.name.includes("copy")))return e;let{target:t,source:r}=e;return e.name.includes("Folder"),t.endsWith("/")&&(t+=r.split("/").pop()),{...e,target:t}},i=e=>{if(!e.name.includes("rename"))return e;let t=e.target;return!e.target.includes("/")&&e.source.includes("/")&&(t=[...e.source.split("/").slice(0,-1),t].join("/")),{...e,target:t}},o=e=>{let{filesToAdd:t,filesToDelete:r}=e;const{tree:n,code:a,utils:i,service:o,changes:c}=e;i.keepHelper(n,(()=>{const e=Object.entries(c).map((([e,t])=>({name:e.split("/").pop(),path:e})));return[...Object.entries(a).map((([e,t])=>({name:e.split("/").pop(),path:e}))),...e]})()).filter((e=>e.includes("/.keep"))).map((e=>"."+e)).forEach((e=>{const i=e.split("/").slice(0,-1).join("/").replace(o+"/",""),c=s(n[o],i)||{};c&&(c[".keep"]={},a[e]=" ",t.push(e),r=r.filter((t=>t!==e)))}));return Object.keys(e.code).filter((e=>e.includes("/.keep"))).forEach((e=>{const i=e.split("/").slice(0,-1).join("/").replace(o+"/",""),c=s(n[o],i)||{};if(0===Object.keys(c).filter((e=>".keep"!==e)).length)return;delete c[".keep"],delete a[e];t.find((t=>t===e))||r.push(e),t=t.filter((t=>t!==e))})),{...e,filesToAdd:t,filesToDelete:r,code:a,tree:n}},c=n((e=>{if(e.name.includes("File"))return e;const t=`./${e.service}/${e.source}`,s=`./${e.service}/${e.target}`,n=r([...Object.keys(e.code),...Object.keys(e.changes)]).filter((e=>e.startsWith(t+"/"))),a=n.map((t=>{const r=t.split(e.source).pop();return`${s}${r}`})),i=[...e.filesToAdd,...a];return n.forEach(((t,r)=>{e.code[a[r]]=async e=>await e.getItem(t)})),{...e,filesToAdd:i}}),(e=>{const{service:t,source:r,target:n,tree:a}=e,i=s(a[t],r)||{},o=n.split("/"),c=1===o.length?o[0]:o.slice(-1).join("/"),l=1===o.length?"":o.slice(0,-1).join("/");return(1===o.length?a[t]:s(a[t],l))[c]=i,{...e,tree:a}}),(e=>{if(!e.name.includes("File"))return e;const t=`./${e.service}/${e.target}`,r=`./${e.service}/${e.source}`,s="addFile"===e.name?async t=>e.source||"":async e=>await e.getItem(r);e.code[t]=s;const n=[...e.filesToAdd,t];return{...e,filesToAdd:n}})),l=n((e=>{if(e.name.includes("File"))return e;const t=`./${e.service}/${e.source}`,s=r([...Object.keys(e.code),...Object.keys(e.changes)]).filter((e=>e.startsWith(t+"/"))),n=[...e.filesToDelete,...s];return s.forEach((t=>{delete e.code[t]})),{...e,filesToDelete:n}}),(e=>{const{service:t,source:r,tree:n}=e,a=r.split("/"),i=1===a.length?a[0]:a.slice(-1).join("/"),o=1===a.length?"":a.slice(0,-1).join("/");return delete(1===a.length?n[t]:s(n[t],o))[i],e}),(e=>{if(!e.name.includes("File"))return e;const t=`./${e.service}/${e.source}`;delete e.code[`./${e.service}/${e.source}`];const r=[...e.filesToDelete,t];return{...e,filesToDelete:r}})),d=(...t)=>n(e,a,i,...t,o),h=d(c),u=d(c),p=d(c,l),m=d(c,l),f=d(l),g={addFile:h,addFolder:h,moveFile:p,moveFolder:p,copyFile:u,copyFolder:u,renameFile:m,renameFolder:m,deleteFile:f,deleteFolder:f};return e=>(t,r,s,n)=>g[e.name]({...e,service:t,code:r,utils:s,changes:n})})(),d=({storage:t,providers:r,ui:n,utils:i})=>async(r,o)=>{const c=t.stores.services,d=t.stores.files,h=t.stores.changes;try{const{id:t}=r,f=await o.request.json(),{name:g,operation:v}=f,w=v?.name?.includes("rename")||v?.name?.includes("move"),y=v?.name?.includes("copy"),b=l(v);let $;if(b){const e=await c.getItem(t+""),r=(await d.keys()).filter((t=>t.startsWith(`./${e.name}/`)||t.startsWith(`${e.name}/`))),n=(await h.keys()).filter((t=>t.startsWith(`./${e.name}/`)||t.startsWith(`${e.name}/`))),a=r.reduce(((e,t)=>({...e,[t]:""})),{}),o=n.reduce(((e,t)=>({...e,[t]:""})),{});$=b(e,a,i,o);const l=(t,r)=>async n=>{let a=n;"./"===n.slice(0,2)&&"github"===e.type&&(a=n.slice(2)),"/"===n.slice(0,1)&&"github"===e.type&&(a=n.slice(1));const i=await h.getItem(a);if(i&&"update"===i.type)return i.value;if(i&&i.deleteFile){return r.filesToAdd=r.filesToAdd.filter((e=>e!==t)),delete s(r.tree,t.split("/").slice(0,-1).join("/"))[t.split("/").pop()],""}return await d.getItem(a)};for(var u in $.code)"function"==typeof $.code[u]&&($.code[u]=await $.code[u]({getItem:l(u,$)}))}if($&&(f.code=Object.entries($.code).map((([e,t])=>({name:e.split("/").pop(),path:e.replace(/^\.\//,""),update:t}))),f.tree=$.tree),!$&&(w||y)){const e=await c.getItem(t+""),r=(await d.keys()).filter((t=>t.startsWith(`./${e.name}/`)));f.code=[];for(var p=0,m=r.length;p<m;p++){const t=r[p],s=v.target.endsWith("/")?v.source.split("/").pop():"",n=await d.getItem(t),a=(t,r)=>w||r?t.replace(`./${e.name}/${v.source}`,`./${e.name}/${v.target}${s}`):t,i=()=>{if(!t.includes(`./${e.name}/${v.source}`))return;const r={name:v.target.split("/").pop(),update:n,path:a(t,"force").replace(/^\./,"")};f.code.push(r)};f.code.push({name:t.split("/").pop(),update:n,path:a(t).replace(/^\./,"")}),y&&i()}f.tree=e.tree;const s=(e,t)=>({parent:e.split("/").slice(0,-1).reduce(((e,t)=>(e[t]=e[t]||{},e[t])),f.tree),param:e.split("/").pop()}),n=s(`${e.name}/${v.source}`,f.tree),a=s(`${e.name}/${v.target}`,f.tree);a.parent[a.param||n.param]=n.parent[n.param],w&&delete n.parent[n.param]}const x=!Array.isArray(f.code)&&i.safe((()=>JSON.parse(f.code)));if(x&&x.tree&&(f.tree=x.tree,f.code=x.files),t===n.id||t===n.id.toString())return n.update({service:f});const S={...await c.getItem(t+"")||{},name:g,tree:f.tree};if(!S.name)return void console.error("cannot set meta store item without name");await c.setItem(t+"",S);const{filesToAdd:k,filesToDelete:T}=await(async()=>{if($&&$.filesToAdd&&$.filesToDelete)return $;const e=i.keepHelper(f.tree,f.code).map((e=>`.${e}`)),t=(await d.keys()).filter((e=>e.startsWith(`./${S.name}/`))),r=t.filter((t=>!e.includes(t)));return{filesToAdd:e.filter((e=>!t.includes(e))),filesToDelete:r}})();for(let e=0,t=k.length;e<t;e++){const t="github"===S.type?a(k[e]):k[e],r=f.code.find((e=>`.${e.path}`===t||e.path===`/${t}`||e.path===t));let s;r?.update&&(s=r.update,delete r.update);const n=s||"";await h.setItem(t,{type:"update",value:n,service:(()=>{const{tree:e,...t}=S;return t})()})}for(let e=0,t=T.length;e<t;e++){const t="github"===S.type?a(T[e]):T[e];null!==await d.getItem(t)?await h.setItem(t,{deleteFile:!0,service:(()=>{const{tree:e,...t}=S;return t})()}):await h.removeItem(t)}const I=(await h.keys()).filter((e=>e.startsWith(`${S.name}`))).map((e=>e.split(S.name+"/")[1])),N=await h.getItem(`state-${S.name}-opened`)||[],j=(N.find((e=>0===e.order))||{}).name||"";return e({result:[{id:S.id,name:S.name,code:f.code.map((({name:e,path:t})=>({name:e,path:t}))),tree:f.tree,state:{opened:N,selected:j,changed:I},treeState:{expand:await h.getItem(`tree-${S.name}-expanded`)||[],select:j,changed:I,new:[]}}]})}catch(t){console.error(t);const{stack:r,message:s}=t;return e({error:{message:s,stack:r}})}};return class{constructor({app:t,storage:r,providers:s,templates:n,ui:a,utils:l}){this.app=t,this.storage=r,this.providers=s,this.templates=n,this.ui=a,this.utils=l,this.handlers={serviceCreate:i(this),serviceChange:o(this),serviceGetChanges:c(this),serviceUpdate:d(this),serviceDelete:(t,r)=>(console.log("/service/delete/:id? triggered"),e({params:t,event:r}))}}}})(),TemplateEngine=class{templates=[];constructor({storage:e}){this.storage=e,this.refresh=this.refresh.bind(this),this.NO_PREVIEW='\n\t\t<!DOCTYPE html>\n\t\t<html class="dark-enabled">\n\t\t\t<head>\n\t\t\t\t<meta charset="UTF-8">\n\t\t\t</head>\n\t\t\t<style>\n\t\t\t\t.no-preview {\n\t\t\t\t\tposition: absolute;\n\t\t\t\t\ttop: 0;\n\t\t\t\t\tleft: 0;\n\t\t\t\t\twidth: 100%;\n\t\t\t\t\theight: 100%;\n\t\t\t\t\tdisplay: flex;\n\t\t\t\t\tjustify-content: center;\n\t\t\t\t\talign-items: center;\n\t\t\t\t\tfont-size: 1.5em;\n\t\t\t\t\tcolor: var(--main-theme-text-color);\n\t\t\t\t}\n\t\t\t\tbody {\n\t\t\t\t\tmargin: 0px;\n\t\t\t\t\tmargin-top: 40px;\n\t\t\t\t\theight: calc(100vh - 40px);\n\t\t\t\t\toverflow: hidden;\n\t\t\t\t\tcolor: var(--main-theme-text-color);\n\t\t\t\t\tbackground: var(--main-theme-color);\n\t\t\t\t\tfont-family: sans-serif;\n\t\t\t\t}\n\t\t\t</style>\n\t\t\t<link rel="stylesheet" href="/colors.css" />\n\t\t\t<body>\n\t\t\t\t<pre>\n\t\t\t\t\t<div class="no-preview" title="No preview!">⠝⠕ ⠏⠗⠑⠧⠊⠑⠺</div>\n\t\t\t\t</pre>\n\t\t\t</body>\n\t\t</html>\n\t\t'.replace(/^		/g,"")}add(e,t){const r={name:e,extensions:[],body:t,tokens:["{{template_value}}","{{markdown}}","{{template_input}}"],matcher:()=>!1};r.extensions.push(e.split(".").shift()),r.convert=e=>{let t=r.body+"";return r.tokens.forEach((r=>{t=t.replace(new RegExp(r,"g"),e)})),t},this.templates.push(r)}update(e,t){const r=e.split(".").shift(),s=this.templates.filter((e=>e.extensions.includes(r)));s.forEach((e=>e.body=t)),s.length||this.add(e,t)}getTemplate(e="",t=""){const r=e.split(".").pop(),s=this.templates.find((e=>e.extensions.includes(r)));return s||(()=>{if(e.includes(".json")&&t.includes("file-type"))try{const e=JSON.parse(t)["file-type"];if(!e)return;return this.templates.find((t=>t.extensions.includes(e)))}catch(e){return void console.error(e)}})()}convert(e,t){if(e.split(".").pop(),e.includes(".htm"))return t;if(!this.templates.length)return!1;const r=this.getTemplate(e,t);return r?r.convert(t):void 0}async refresh(){const e=this.storage.stores.files,t=(await e.keys()).filter((e=>e.includes("/.templates/")));for(var r=0,s=t.length;r<s;r++){const s=t[r],n=await e.getItem(s),a=s.split("/").pop();this.templates.find((e=>e.name===a))?this.update(a,n):this.add(a,n)}}},init=async()=>{const e=self.handlers;await utils.initMimeTypes();const t=new UIManager("fiug"),r=new StorageManager({utils:utils,ui:t});t.init(r.stores.handlers,r.stores.changes);const s=new TemplateEngine({storage:r}),n=new Router({storage:r,templates:s,swHandlers:e}),a=await new ProviderManager({app:n,storage:r,utils:utils,GithubProvider:GithubProvider}),i=new ServicesManager({app:n,storage:r,providers:a,ui:t,utils:utils,templates:s});n.get("/service/search/",r.handlers.serviceSearch),n.get("/service/read/:id?",r.handlers.serviceRead),n.post("/service/create/:id?",i.handlers.serviceCreate),n.get("/service/change",i.handlers.serviceGetChanges),n.post("/service/change",i.handlers.serviceChange),n.post("/service/commit",a.handlers.createCommit),n.post("/service/update/:id?",i.handlers.serviceUpdate),n.post("/service/provider/delete/:id?",i.handlers.serviceDelete),n.post("/service/provider/test/:id?",a.handlers.testHandler),n.post("/service/provider/create",a.handlers.createHandler),n.post("/service/provider/read/:id?",a.handlers.readHandler),n.post("/service/provider/update/:id?",a.handlers.updateHandler),n.post("/service/provider/delete/:id?",a.handlers.deleteHandler),n.get("/manage/:id?",utils.notImplementedHandler),n.get("/monitor/:id?",utils.notImplementedHandler),n.get("/persist/:id?",utils.notImplementedHandler),self.handler=async e=>{try{const r=e.request.url.replace(location.origin,"").split("/");if(r.includes("::preview::")&&r.includes(t.name))return new Response(s.NO_PREVIEW,{headers:{"Content-Type":"text/html"}})}catch(e){}const r=await n.find(e.request),a=r?await r.exec(e):"no match in service request listener!";let i;if(e.request.url.includes("/::preview::/"))return i=new Response(utils.addBase(a),{headers:{"Content-Type":"text/html"}}),i;let{contentType:o}=utils.getMime(e.request.url)||{};return o||!r||a?.type||({contentType:o}=utils.getMime(".json")),o?(i=new Response(a,{headers:{"Content-Type":o||a.type}}),i):new Response(a)}};var Handler={init:init};const cacheName$1="v0.4.4-2021-09-10T04:08:32.215Z";importScripts("/shared/vendor/localforage.min.js"),importScripts("/shared/vendor/json5v-2.0.0.min.js"),self.addEventListener("install",installHandler),self.addEventListener("activate",activateHandler),self.addEventListener("fetch",asyncFetchHandler),self.addEventListener("foreignfetch",asyncFetchHandler),self.addEventListener("message",messageHandler),self.addEventListener("sync",syncHandler),self.addEventListener("push",pushHandler),self.handlers=[];const driver=[localforage.INDEXEDDB,localforage.WEBSQL,localforage.LOCALSTORAGE];let handlerStore;function getHandlerStore(){return handlerStore||localforage.createInstance({driver:driver,name:"service-worker",version:1,storeName:"handlers",description:"used after app has booted when service worker is updated"})}handlerStore=getHandlerStore(),Handler.init();const activateHandlers=async()=>(handlerStore=getHandlerStore(),await handlerStore.iterate(((value,key)=>{const{type:type,route:route,handlerName:handlerName,handlerText:handlerText}=value,foundHandler=handlers.find((e=>e.handlerName===handlerName)),foundExactHandler=foundHandler&&handlers.find((e=>e.handlerName===handlerName&&e.routePattern===route));if(foundExactHandler)return;let handlerFunction;if(!foundHandler)try{handlerFunction=eval(handlerText)}catch(e){handlerFunction=self.handler}handlers.push({type:type,routePattern:route,route:"fetch"===type?new RegExp(route):route,handler:handlerFunction||foundHandler.handler,handlerName:handlerName,handlerText:handlerText})})));async function installHandler(e){return console.log("service worker install event"),self.skipWaiting()}function activateHandler(e){console.log("service worker activate event"),e.waitUntil((async()=>(await self.clients.claim(),await activateHandlers()))())}function asyncFetchHandler(e){if(!(e.request.url.includes("https://crosshj.auth0.com")||e.request.url.includes("index.bootstrap")||e.request.url.includes("localhost:3333")||e.request.url.includes("allorigins")||e.request.url.includes("browser-sync/socket.io")||e.request.url.includes("browser-sync/browser-sync-client")||e.request.url.includes("?browsersync=")||"no-store"===e.request.cache||"no-cache"===e.request.headers.get("pragma")&&"no-cache"===e.request.headers.get("cache-control")))if(e.request.url.includes("unpkg")||e.request.url.includes("cdn.jsdelivr")||e.request.url.includes("rawgit.com")||e.request.url.includes("cdn.skypack.dev")){const t=async()=>{const t=await caches.open(cacheName$1),r=await t.match(e.request);if(r)return r;const s=await fetch(e.request);return t.put(e.request,s.clone()),s};e.respondWith(t())}else e.request.url.includes("https://webtorrent.io/torrents/")||e.request.url.includes("api.github.com")||e.respondWith(async function(){handlers.length||await activateHandlers();return await fetchHandler(e)}())}async function fetchHandler(e){const t=["//(.*)"],r=handlers.filter((e=>!t.includes(e.routePattern))),s=e.request.url.replace(location.origin,"");if(r.find((e=>"fetch"===e.type&&e.route.test(s))))return self.handler(e);const n=await caches.match(e.request);return n||await fetch(e.request)}function messageHandler(e){const{data:t}=e,{bootstrap:r}=t||{};r?(async()=>{try{console.log("booting");const t=t=>{const r=e.source;r?r.postMessage({module:t,msg:"module-loaded"}):console.error("failed to notify client on boot complete")},s=await bootstrapHandler(r,t),n=e.source;if(!n)return void console.error("failed to notify client on boot complete");n.postMessage({modules:s.filter((e=>!e.includes||!e.includes("NOTE:"))),msg:"boot complete"})}catch(t){console.log(t);const r=e.source;if(!r)return void console.error("failed to notify client on boot complete");r.postMessage({msg:"boot error - you offline?"})}})():(console.log("service worker message event"),console.log({data:t}))}function syncHandler(e){console.log("service worker sync event")}function pushHandler(e){console.log("service worker push event")}async function bootstrapHandler({manifest:e},t){const r=await fetch(e),s=JSON5.parse(await r.text()),n=new Response(JSON.stringify(s,null,2),{status:r.status,statusText:r.statusText,headers:r.headers});await caches.open(cacheName$1).then((function(t){t.put(e,n)}));const{modules:a}=s||{};if(a&&Array.isArray(a)){for(var i=0,o=a.length;i<o;i++)await registerModule(a[i]),t(a[i]);return a}console.error("Unable to find modules in service manifest")}async function registerModule(module){try{if(module.includes&&module.includes("NOTE:"))return;const{source:source,include:include,route:route,handler:handler,resources:resources,type:type}=module;if(!route&&!resources)return void console.error("module must be registered with a route or array of resources!");if(handler){let foundHandler=handlers.find((e=>e.handlerName===handler)),handlerFunction,handlerText;"./modules/service-worker.handler.js"===handler&&self.handler&&(handlerText="service-worker-handler-register-module",handlerFunction=self.handler,foundHandler={handler:handler,handlerText:handlerText}),foundHandler&&foundHandler.handler||(handlerText=await(await fetch(handler)).text(),handlerFunction=eval(handlerText));const foundExactHandler=foundHandler&&handlers.find((e=>e.handlerName===handler&&e.routePattern===route));if(foundExactHandler)return;return await handlerStore.setItem(route,{type:type,route:route,handlerName:handler,handlerText:handlerText||foundHandler.handlerText}),void handlers.push({type:type,routePattern:route,route:"fetch"===type?new RegExp(route):route,handler:handlerFunction||foundHandler.handler,handlerName:handler,handlerText:handlerText||foundHandler.handlerText})}if(resources&&await Promise.all(resources.map((async e=>{const t={};e.includes(".htm")&&(t.headers=t.headers||{},t.headers.Accept=t.headers.Accept||"",t.headers.Accept="text/html,"+t.headers.Accept);const r=await fetch(e,t);return await caches.open(cacheName$1).then((function(t){t.put(e,r)}))}))),include){const e=await fetch(source),t=[];await Promise.all(include.map((async e=>{const r=await(await fetch(e)).text();t.push(`\n\n/*\n\n${e}\n\n*/ \n ${r}`)})));let r=`/* ${source} */\n ${await e.text()}`+t.join("");const s=new Response(r,{status:e.status,statusText:e.statusText,headers:e.headers});return await caches.open(cacheName$1).then((function(e){e.put(route,s)}))}if(source){const e=await fetch(source);return caches.open(cacheName$1).then((function(t){t.put(route,e)}))}}catch(e){console.error("failed to register module"),console.log(module),console.log(e)}}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,